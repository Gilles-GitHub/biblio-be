buildscript {
    ext {
        kotlinVersion = '1.2.71'
        springBootVersion = '2.1.1.RELEASE'
        swaggerVersion = '2.1.1.RELEASE'
    }
    repositories {
//        jcenter()
//        mavenCentral()
        maven { url "http://nexus.airfrance.fr/nexus/repository/maven-central/"}
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.ggardet'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
//    jcenter()
//    mavenCentral()
    maven { url "http://nexus.airfrance.fr/nexus/repository/maven-central/"}
}

dependencies {
    compile('com.google.guava:guava:26.0-jre')
    compile('io.jsonwebtoken:jjwt:0.9.1')
    compile('io.springfox:springfox-swagger-ui:2.9.2')
    compile('io.springfox:springfox-swagger2:2.9.2')
    compile('javax.persistence:javax.persistence-api:2.2')
    compile('javax.xml.bind:jaxb-api:2.3.0')
    compile('org.codehaus.jackson:jackson-core-asl:1.1.0')
    compile('org.apache.commons:commons-lang3:3.4')
    compile('org.jetbrains.kotlin:kotlin-reflect')
    compile('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    compile('org.slf4j:slf4j-api')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
